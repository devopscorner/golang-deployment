AWSTemplateFormatVersion: '2010-09-09'
Description: A CloudFormation template for deploying a Golang app using AWS CodePipeline and AWS CodeBuild, sourced from an AWS CodeCommit repository.

Parameters:
  RepositoryName:
    Type: String
    Description: The name of the AWS CodeCommit repository.
  BranchName:
    Type: String
    Default: master
    Description: The branch to use for the source code.
  ECRRepoName:
    Type: String
    Description: The name of the Elastic Container Registry (ECR) repository to use for storing the Docker image.
  S3Bucket:
    Type: String
    Description: The name of the S3 bucket to use for storing pipeline artifacts.
  KMSKeyArn:
    Type: String
    Description: The ARN of the KMS key to use for encrypting pipeline artifacts.
  StagingClusterName:
    Type: String
    Description: The name of the ECS cluster to use for the staging environment.
  StagingServiceName:
    Type: String
    Description: The name of the ECS service to use for the staging environment.
  ProductionClusterName:
    Type: String
    Description: The name of the ECS cluster to use for the production environment.
  ProductionServiceName:
    Type: String
    Description: The name of the ECS service to use for the production environment.

Resources:
  ECRRepo:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref ECRRepoName

  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub "${AWS::StackName}-SNSTopic"
      TopicName: !Sub "${AWS::StackName}-SNSTopic"

  SNSTopicSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      TopicArn: !Ref SNSTopic
      Endpoint: support@devopscorner.id

  CodeCommitRepo:
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryName: !Ref RepositoryName

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${AWS::StackName}-CodeBuildProject"
      Description: My Golang app
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      TimeoutInMinutes: 60
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        ## Image: aws/codebuild/standard:5.0
        Image: devopscorner/cicd:codebuild-4.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: AWS_REGION
            Value: us-west-2
          - Name: ENVIRONMENT
            Value: !If [IsStaging, "staging", "production"]
          - Name: ECR_REPOSITORY_URI
            Value: !Join ['', [!GetAtt ECRRepo.RepositoryUri, ':', !Ref ImageTag]]
      Source:
        Type: CODECOMMIT
        Location: !Sub "https://git-codecommit.${AWS::Region}.amazonaws.com/v1/repos/${RepositoryName}"
        GitCloneDepth: 1
        ReportBuildStatus: true
        # BuildSpec: |
        #   version: 0.2

        #   phases:
        #     install:
        #       commands:
        #         - echo "Install phase"
        #     build:
        #       commands:
        #         - echo "Build phase"
        #         - export IMAGE_TAG=$CODEBUILD_RESOLVED_SOURCE_VERSION
        #         - echo $IMAGE_TAG > image_tag.txt
        #         - echo "IMAGE_TAG=$IMAGE_TAG" >> build.env
        #       finally:
        #         - echo "Pushing Docker image to ECR..."
        #         - $(aws ecr get-login --no-include-email --region us-west-2)
        #         - docker push !Join ['', [!GetAtt ECRRepo.RepositoryUri, ':', !Ref Image
        #       Tag]]
      artifacts:
        files:
          - image_tag.txt
        name: build-artifact

  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub "${AWS::StackName}-CodePipeline"
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref S3Bucket
        EncryptionKey:
          Type: KMS
          Id: !Ref KMSKeyArn
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: '1'
              OutputArtifacts:
                - Name: SourceArtifact
              Configuration:
                RepositoryName: !Ref RepositoryName
                BranchName: !Ref BranchName
                RunOrder: 1

        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
                InputArtifacts:
                  - Name: SourceArtifact
                OutputArtifacts:
                  - Name: BuildArtifact
              Configuration:
                ProjectName: !Ref CodeBuildProject
                EnvironmentVariables:
                  - Name: IMAGE_TAG
                    Value: !Ref ImageTag
                RunOrder: 2

        - Name: ManualApproval
          Actions:
            - Name: ManualApproval
              Category: Approval
              Owner: AWS
              Provider: Manual
              Version: '1'
              InputArtifacts:
                - Name: BuildArtifact
              OutputArtifacts:
                - Name: ApproveArtifact
              Configuration:
                NotificationArn: !Ref SNSTopic
                CustomData: "Do you want to deploy the latest changes to production?"
              RunOrder: 3

        - Name: DeployStaging
          Actions:
            - Name: DeployStaging
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: ECS
                Version: '1'
                InputArtifacts:
                  - Name: BuildArtifact
                  - Name: ApproveArtifact
              Configuration:
                ClusterName: !Ref StagingClusterName
                ServiceName: !Ref StagingServiceName
                FileName: imagedefinitions.json
                ImageUri: !Join ['', [!GetAtt ECRRepo.RepositoryUri, ':', !Ref ImageTag]]
              RunOrder: 4
              Condition:
                StringEquals:
                  - !Ref IsStaging
                  - "true"

        - Name: DeployProd
          Actions:
            - Name: DeployProd
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: ECS
                Version: '1'
                InputArtifacts:
                  - Name: BuildArtifact
                  - Name: ApproveArtifact
              Configuration:
                ClusterName: !Ref ProductionClusterName
                ServiceName: !Ref ProductionServiceName
                FileName: imagedefinitions.json
                ImageUri: !Join ['', [!GetAtt ECRRepo.RepositoryUri, ':', !Ref ImageTag]]
                RunOrder: 4
              Condition:
                StringEquals:
                  - !Ref IsStaging
                  - "false"
                StartsWith:
                  ApprovalStatus: "Approved"

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
        Principal:
          Service: codepipeline.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodePipelineFullAccess
      Policies:
        - PolicyName: AllowECRWriteAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:PutImage
                Resource: !GetAtt ECRRepo.Arn

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
      Version: 2012-10-17
      Statement:
        - Effect: Allow
      Principal:
        Service: codebuild.amazonaws.com
        Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Policies:
      - PolicyName: AllowECRReadAccess

    PolicyDocument:
      Version: 2012-10-17
      Statement:
        - Effect: Allow
      Action:
        - ecr:GetAuthorizationToken
        - ecr:GetDownloadUrlForLayer
        - ecr:BatchGetImage
      Resource: '*'

  S3ArtifactStoreBucket:
    Type: AWS::S3::Bucket
    Properties:
    BucketName: !Ref S3Bucket

  S3Object:
  Type: AWS::S3::Object
  Properties:
  Bucket: !Ref S3Bucket
  Key: !Sub "${AWS::StackName}/buildspec.yml"
  ContentType: text/x-yaml
  Body: |-
  version: 0.2
      phases:
        install:
          commands:
            - echo "Install phase"
        build:
          commands:
            - echo "Build phase"
            - export IMAGE_TAG=$CODEBUILD_RESOLVED_SOURCE_VERSION
            - echo $IMAGE_TAG > image_tag.txt
            - echo "IMAGE_TAG=$IMAGE_TAG" >> build.env
        post_build:
          commands:
            - echo "Post build phase"
            - echo "Pushing Docker image to ECR..."
            - $(aws ecr get-login --no-include-email --region us-west-2)
            - docker push !Join ['', [!GetAtt ECRRepo.RepositoryUri, ':', !Ref ImageTag]]
            - echo "Pushed Docker image to ECR successfully."

Outputs:
  CodePipelineUrl:
    Description: The URL of the AWS CodePipeline.
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/codesuite/codepipeline/pipelines/${AWS::StackName}-CodePipeline/view?region=${AWS::Region}"
  ECRRepositoryUrl:
    Description: URL of the Elastic Container Registry (ECR) repository.
    Value: !GetAtt ECRRepo.RepositoryUri
  SNSTopicArn:
    Description: ARN of the SNS topic.
    Value: !Ref SNSTopic
  PipelineName:
    Description: Name of the CodePipeline.
    Value: !Ref CodePipeline
  CodeBuildProjectName:
    Description: Name of the CodeBuild project.
    Value: !Ref CodeBuildProject
